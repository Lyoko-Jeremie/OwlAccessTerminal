// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImageProtocol.proto

#include "ImageProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ImageRequest::ImageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cmd_id_)*/0
  , /*decltype(_impl_.package_id_)*/0
  , /*decltype(_impl_.camera_id_)*/0
  , /*decltype(_impl_.image_width_)*/0
  , /*decltype(_impl_.image_height_)*/0} {}
struct ImageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageRequestDefaultTypeInternal() {}
  union {
    ImageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageRequestDefaultTypeInternal _ImageRequest_default_instance_;
PROTOBUF_CONSTEXPR ImageResponse::ImageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.image_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmd_id_)*/0
  , /*decltype(_impl_.package_id_)*/0
  , /*decltype(_impl_.camera_id_)*/0
  , /*decltype(_impl_.image_width_)*/0
  , /*decltype(_impl_.image_height_)*/0
  , /*decltype(_impl_.image_pixel_channel_)*/0
  , /*decltype(_impl_.image_data_size_)*/uint64_t{0u}
  , /*decltype(_impl_.image_format_)*/0} {}
struct ImageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageResponseDefaultTypeInternal() {}
  union {
    ImageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageResponseDefaultTypeInternal _ImageResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_ImageProtocol_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ImageProtocol_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ImageProtocol_2eproto = nullptr;

const uint32_t TableStruct_ImageProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ImageRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ImageRequest, _impl_.cmd_id_),
  PROTOBUF_FIELD_OFFSET(::ImageRequest, _impl_.package_id_),
  PROTOBUF_FIELD_OFFSET(::ImageRequest, _impl_.camera_id_),
  PROTOBUF_FIELD_OFFSET(::ImageRequest, _impl_.image_width_),
  PROTOBUF_FIELD_OFFSET(::ImageRequest, _impl_.image_height_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ImageResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ImageResponse, _impl_.cmd_id_),
  PROTOBUF_FIELD_OFFSET(::ImageResponse, _impl_.package_id_),
  PROTOBUF_FIELD_OFFSET(::ImageResponse, _impl_.camera_id_),
  PROTOBUF_FIELD_OFFSET(::ImageResponse, _impl_.image_width_),
  PROTOBUF_FIELD_OFFSET(::ImageResponse, _impl_.image_height_),
  PROTOBUF_FIELD_OFFSET(::ImageResponse, _impl_.image_data_size_),
  PROTOBUF_FIELD_OFFSET(::ImageResponse, _impl_.image_pixel_channel_),
  PROTOBUF_FIELD_OFFSET(::ImageResponse, _impl_.image_format_),
  PROTOBUF_FIELD_OFFSET(::ImageResponse, _impl_.image_data_),
  ~0u,
  1,
  2,
  3,
  4,
  6,
  5,
  7,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::ImageRequest)},
  { 16, 31, -1, sizeof(::ImageResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ImageRequest_default_instance_._instance,
  &::_ImageResponse_default_instance_._instance,
};

const char descriptor_table_protodef_ImageProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023ImageProtocol.proto\"\302\001\n\014ImageRequest\022\016"
  "\n\006cmd_id\030\001 \001(\005\022\027\n\npackage_id\030\002 \001(\005H\000\210\001\001\022"
  "\026\n\tcamera_id\030\003 \001(\005H\001\210\001\001\022\030\n\013image_width\030\013"
  " \001(\005H\002\210\001\001\022\031\n\014image_height\030\014 \001(\005H\003\210\001\001B\r\n\013"
  "_package_idB\014\n\n_camera_idB\016\n\014_image_widt"
  "hB\017\n\r_image_height\"\221\003\n\rImageResponse\022\016\n\006"
  "cmd_id\030\001 \001(\005\022\027\n\npackage_id\030\002 \001(\005H\000\210\001\001\022\026\n"
  "\tcamera_id\030\003 \001(\005H\001\210\001\001\022\030\n\013image_width\030\013 \001"
  "(\005H\002\210\001\001\022\031\n\014image_height\030\014 \001(\005H\003\210\001\001\022\034\n\017im"
  "age_data_size\0302 \001(\004H\004\210\001\001\022 \n\023image_pixel_"
  "channel\0303 \001(\005H\005\210\001\001\022\'\n\014image_format\0304 \001(\016"
  "2\014.ImageFormatH\006\210\001\001\022\027\n\nimage_data\030< \001(\014H"
  "\007\210\001\001B\r\n\013_package_idB\014\n\n_camera_idB\016\n\014_im"
  "age_widthB\017\n\r_image_heightB\022\n\020_image_dat"
  "a_sizeB\026\n\024_image_pixel_channelB\017\n\r_image"
  "_formatB\r\n\013_image_data*\227\001\n\013ImageFormat\022\025"
  "\n\021IMAGE_FORMAT_NONE\020\000\022\024\n\020IMAGE_FORMAT_JP"
  "G\020\001\022\024\n\020IMAGE_FORMAT_BMP\020\002\022\024\n\020IMAGE_FORMA"
  "T_PNG\020\003\022\024\n\020IMAGE_FORMAT_GIF\020\004\022\031\n\025IMAGE_F"
  "ORMAT_BYTE_MAT\020\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ImageProtocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ImageProtocol_2eproto = {
    false, false, 784, descriptor_table_protodef_ImageProtocol_2eproto,
    "ImageProtocol.proto",
    &descriptor_table_ImageProtocol_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_ImageProtocol_2eproto::offsets,
    file_level_metadata_ImageProtocol_2eproto, file_level_enum_descriptors_ImageProtocol_2eproto,
    file_level_service_descriptors_ImageProtocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ImageProtocol_2eproto_getter() {
  return &descriptor_table_ImageProtocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ImageProtocol_2eproto(&descriptor_table_ImageProtocol_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ImageProtocol_2eproto);
  return file_level_enum_descriptors_ImageProtocol_2eproto[0];
}
bool ImageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ImageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageRequest>()._impl_._has_bits_);
  static void set_has_package_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_image_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_image_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ImageRequest::ImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ImageRequest)
}
ImageRequest::ImageRequest(const ImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_id_){}
    , decltype(_impl_.package_id_){}
    , decltype(_impl_.camera_id_){}
    , decltype(_impl_.image_width_){}
    , decltype(_impl_.image_height_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cmd_id_, &from._impl_.cmd_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.image_height_) -
    reinterpret_cast<char*>(&_impl_.cmd_id_)) + sizeof(_impl_.image_height_));
  // @@protoc_insertion_point(copy_constructor:ImageRequest)
}

inline void ImageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_id_){0}
    , decltype(_impl_.package_id_){0}
    , decltype(_impl_.camera_id_){0}
    , decltype(_impl_.image_width_){0}
    , decltype(_impl_.image_height_){0}
  };
}

ImageRequest::~ImageRequest() {
  // @@protoc_insertion_point(destructor:ImageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ImageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmd_id_ = 0;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.package_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.image_height_) -
        reinterpret_cast<char*>(&_impl_.package_id_)) + sizeof(_impl_.image_height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cmd_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cmd_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 package_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_package_id(&has_bits);
          _impl_.package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 camera_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_camera_id(&has_bits);
          _impl_.camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 image_width = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_image_width(&has_bits);
          _impl_.image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 image_height = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_image_height(&has_bits);
          _impl_.image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cmd_id = 1;
  if (this->_internal_cmd_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd_id(), target);
  }

  // optional int32 package_id = 2;
  if (_internal_has_package_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_package_id(), target);
  }

  // optional int32 camera_id = 3;
  if (_internal_has_camera_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_camera_id(), target);
  }

  // optional int32 image_width = 11;
  if (_internal_has_image_width()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_image_width(), target);
  }

  // optional int32 image_height = 12;
  if (_internal_has_image_height()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_image_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageRequest)
  return target;
}

size_t ImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cmd_id = 1;
  if (this->_internal_cmd_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cmd_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 package_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_package_id());
    }

    // optional int32 camera_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_camera_id());
    }

    // optional int32 image_width = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image_width());
    }

    // optional int32 image_height = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image_height());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageRequest::GetClassData() const { return &_class_data_; }


void ImageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageRequest*>(&to_msg);
  auto& from = static_cast<const ImageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ImageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cmd_id() != 0) {
    _this->_internal_set_cmd_id(from._internal_cmd_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.package_id_ = from._impl_.package_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.camera_id_ = from._impl_.camera_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.image_width_ = from._impl_.image_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.image_height_ = from._impl_.image_height_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageRequest::CopyFrom(const ImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageRequest::IsInitialized() const {
  return true;
}

void ImageRequest::InternalSwap(ImageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageRequest, _impl_.image_height_)
      + sizeof(ImageRequest::_impl_.image_height_)
      - PROTOBUF_FIELD_OFFSET(ImageRequest, _impl_.cmd_id_)>(
          reinterpret_cast<char*>(&_impl_.cmd_id_),
          reinterpret_cast<char*>(&other->_impl_.cmd_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ImageProtocol_2eproto_getter, &descriptor_table_ImageProtocol_2eproto_once,
      file_level_metadata_ImageProtocol_2eproto[0]);
}

// ===================================================================

class ImageResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageResponse>()._impl_._has_bits_);
  static void set_has_package_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_image_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_image_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_image_data_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_image_pixel_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_image_format(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ImageResponse::ImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ImageResponse)
}
ImageResponse::ImageResponse(const ImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_data_){}
    , decltype(_impl_.cmd_id_){}
    , decltype(_impl_.package_id_){}
    , decltype(_impl_.camera_id_){}
    , decltype(_impl_.image_width_){}
    , decltype(_impl_.image_height_){}
    , decltype(_impl_.image_pixel_channel_){}
    , decltype(_impl_.image_data_size_){}
    , decltype(_impl_.image_format_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image_data()) {
    _this->_impl_.image_data_.Set(from._internal_image_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cmd_id_, &from._impl_.cmd_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.image_format_) -
    reinterpret_cast<char*>(&_impl_.cmd_id_)) + sizeof(_impl_.image_format_));
  // @@protoc_insertion_point(copy_constructor:ImageResponse)
}

inline void ImageResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_data_){}
    , decltype(_impl_.cmd_id_){0}
    , decltype(_impl_.package_id_){0}
    , decltype(_impl_.camera_id_){0}
    , decltype(_impl_.image_width_){0}
    , decltype(_impl_.image_height_){0}
    , decltype(_impl_.image_pixel_channel_){0}
    , decltype(_impl_.image_data_size_){uint64_t{0u}}
    , decltype(_impl_.image_format_){0}
  };
  _impl_.image_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImageResponse::~ImageResponse() {
  // @@protoc_insertion_point(destructor:ImageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_data_.Destroy();
}

void ImageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.image_data_.ClearNonDefaultToEmpty();
  }
  _impl_.cmd_id_ = 0;
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.package_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.image_format_) -
        reinterpret_cast<char*>(&_impl_.package_id_)) + sizeof(_impl_.image_format_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cmd_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cmd_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 package_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_package_id(&has_bits);
          _impl_.package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 camera_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_camera_id(&has_bits);
          _impl_.camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 image_width = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_image_width(&has_bits);
          _impl_.image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 image_height = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_image_height(&has_bits);
          _impl_.image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 image_data_size = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_image_data_size(&has_bits);
          _impl_.image_data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 image_pixel_channel = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_image_pixel_channel(&has_bits);
          _impl_.image_pixel_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ImageFormat image_format = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_image_format(static_cast<::ImageFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // optional bytes image_data = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_image_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cmd_id = 1;
  if (this->_internal_cmd_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd_id(), target);
  }

  // optional int32 package_id = 2;
  if (_internal_has_package_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_package_id(), target);
  }

  // optional int32 camera_id = 3;
  if (_internal_has_camera_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_camera_id(), target);
  }

  // optional int32 image_width = 11;
  if (_internal_has_image_width()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_image_width(), target);
  }

  // optional int32 image_height = 12;
  if (_internal_has_image_height()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_image_height(), target);
  }

  // optional uint64 image_data_size = 50;
  if (_internal_has_image_data_size()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(50, this->_internal_image_data_size(), target);
  }

  // optional int32 image_pixel_channel = 51;
  if (_internal_has_image_pixel_channel()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(51, this->_internal_image_pixel_channel(), target);
  }

  // optional .ImageFormat image_format = 52;
  if (_internal_has_image_format()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      52, this->_internal_image_format(), target);
  }

  // optional bytes image_data = 60;
  if (_internal_has_image_data()) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_image_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageResponse)
  return target;
}

size_t ImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes image_data = 60;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image_data());
  }

  // int32 cmd_id = 1;
  if (this->_internal_cmd_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cmd_id());
  }

  if (cached_has_bits & 0x000000feu) {
    // optional int32 package_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_package_id());
    }

    // optional int32 camera_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_camera_id());
    }

    // optional int32 image_width = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image_width());
    }

    // optional int32 image_height = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image_height());
    }

    // optional int32 image_pixel_channel = 51;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_image_pixel_channel());
    }

    // optional uint64 image_data_size = 50;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_image_data_size());
    }

    // optional .ImageFormat image_format = 52;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_image_format());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageResponse::GetClassData() const { return &_class_data_; }


void ImageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageResponse*>(&to_msg);
  auto& from = static_cast<const ImageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ImageResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image_data()) {
    _this->_internal_set_image_data(from._internal_image_data());
  }
  if (from._internal_cmd_id() != 0) {
    _this->_internal_set_cmd_id(from._internal_cmd_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.package_id_ = from._impl_.package_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.camera_id_ = from._impl_.camera_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.image_width_ = from._impl_.image_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.image_height_ = from._impl_.image_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.image_pixel_channel_ = from._impl_.image_pixel_channel_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.image_data_size_ = from._impl_.image_data_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.image_format_ = from._impl_.image_format_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageResponse::CopyFrom(const ImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageResponse::IsInitialized() const {
  return true;
}

void ImageResponse::InternalSwap(ImageResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_data_, lhs_arena,
      &other->_impl_.image_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.image_format_)
      + sizeof(ImageResponse::_impl_.image_format_)
      - PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.cmd_id_)>(
          reinterpret_cast<char*>(&_impl_.cmd_id_),
          reinterpret_cast<char*>(&other->_impl_.cmd_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ImageProtocol_2eproto_getter, &descriptor_table_ImageProtocol_2eproto_once,
      file_level_metadata_ImageProtocol_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ImageRequest*
Arena::CreateMaybeMessage< ::ImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ImageResponse*
Arena::CreateMaybeMessage< ::ImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ImageResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
